<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="copy__c_8c" kind="file" language="C++">
    <compoundname>copy_c.c</compoundname>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c</label>
        <link refid="copy__c_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="copy__c_8c_1a94f5348a1f63e7be96ae7877d3850377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_c_0</definition>
        <argsstring>(int32_t *__restrict a, int32_t *__restrict b)</argsstring>
        <name>copy_c_0</name>
        <param>
          <type>int32_t *__restrict</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int32_t *__restrict</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c" line="7" column="6" bodyfile="/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="copy__c_8c_1aa1ed94caa6255579fe34ea4aa90593bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_c_1</definition>
        <argsstring>(int64_t n, int32_t *__restrict a, int32_t *__restrict b)</argsstring>
        <name>copy_c_1</name>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int32_t *__restrict</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int32_t *__restrict</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c" line="18" column="6" bodyfile="/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c" bodystart="18" bodyend="24"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_c_0(<sp/>int32_t<sp/>*<sp/>__restrict<sp/>a,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>__restrict<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>b[0]<sp/>=<sp/>a[0];</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>b[1]<sp/>=<sp/>a[1];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>b[2]<sp/>=<sp/>a[2];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>b[3]<sp/>=<sp/>a[3];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>b[4]<sp/>=<sp/>a[4];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>b[5]<sp/>=<sp/>a[5];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>b[6]<sp/>=<sp/>a[6];</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_c_1(<sp/>int64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>__restrict<sp/>a,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>__restrict<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>a[i];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/machine-learning-compilers/machine-learning-compilers/src/submissions/02_base/01_copying_data/copy_c.c"/>
  </compounddef>
</doxygen>
